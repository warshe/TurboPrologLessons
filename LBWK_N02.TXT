****************************************************************
***      Айзикович А.А.,    МК  ИМИ,         март 1992.      ***
***      Айзикович А.А.,   ПМИ ИжГТУ,    сентябрь 1994.      ***
****************************************************************
***                 Лабораторная работа N 2                  ***
***         "Синтаксис и семантика пролог-программ.          ***
***             Некоторые операции над списками"             ***
****************************************************************

            3. Синтаксис и семантика пролог-программ

3.3. Отработайте понятие "процедурная семантика".
     a) Войдите в  Турбо-пролог.  Установите  режим  трассировки
        программы:
        <Alt-O>, Compiler directives, Trace Off, Trace;
     b) наберите   текст  программы  или  воспользуйтесь  файлом
        exmpl204.pro:

        PREDICATES
           big(symbol)
           small(symbol)
           brown(symbol)
           black(symbol)
           grey(symbol)
           dark(symbol)
        CLAUSES
           big(bear).             /* большой медведь */
           big(elephant).         /* большой слон */
           small(cat).            /* маленький кот */
           brown(bear).           /* коричневый медведь */
           black(cat).            /* черный кот */
           grey(elephant).        /* серый слон */
           dark(Z):-black(Z).     /* темный */
           dark(Z):-brown(Z).

     c) отработайте цели ?- big(X), dark(X).
                         ?- dark(X), big(X).
        (Запуск программы - <Alt-R>, трассировка - <F10>.)
        Какая цель достигается быстрее и почему ?

3.4. Поэкспериментируйте с программой exmpl205.pro, решающей за-
     дачу об обезьяне и банане.  Отработайте цель
     GOAL:
     can_take(state("by_door","on_floor","by_window","no_has")),
     ставя последовательно на первое место  правила  "схватить",
     "залесть",  "передвинуть", "перейти". Всегда ли будут полу-
     чены решения ?

3.7. Отработайте программу нахождения остатка  от  деления  двух
     натуральных чисел (exmpl202.p):

     ((остаток X Y) (F X Y Z) (PP Z))
     ((F X Y X) (LESS X Y))
     ((F X Y Z) (SUM x Y X) (F x Y Z))

     Встроенный предикат LESS описывает отношение "меньше".

3.8. Следующая программа (exmpl203.p) выбирает четные числа.

     ((even (x|X) (ev x) (even X))
     ((ev x) (TIMES x1 2 x) (TIMES x1 2 x) (PP x))
     ((ev x))

     Разберите ее декларативную и процедурную семантику.

================================================================

               4. Некоторые операции над списками

4.1. В среде Турбо-пролога с помощью программы (exmpl401 .pro)

     DOMAINS
        lsymbol=symbol*
     PREDICATES
        list(lsymbol)
     CLAUSES
        list([]).
        list(_|X):-list(X).

     убедитесь в следующих равенствах, обеспечивающих различные
     представления одного и того же списка,
     [a,b,c] = [a|[b,c]] = [a,b|[c]] = [a,b,c|[]].
     Обратите внимание на способ описания списка, его запись и
     запись пустого списка.

4.2. В среде Турбо-пролога отработайте программу (exmpl402.pro),
     реализующую предикат принадлежности элемента списку.

     DOMAINS
        slist = symbol*
     PREDICATES
        member(symbol,slist)
     CLAUSES
        member(X,[X|Tail]).
        member(X,[Head|Tail]):-        /*  [Голова|Хвост]  */
           member(X,Tail).

     Установите, принадлежит ли данный элемент заданному списку,
     и какие элементы входят в список.

4.3. В среде Турбо-пролога отработайте программу exmpl403.pro,
     реализующую сцепление двух списков.

     DOMAINS
        slist = symbol*
     PREDICATES
        concaten(slist,slist,slist)
     CLAUSES
        concaten([],Y,Y).
        concaten([Xh|X],Y,[Xh|Z]):-
           concaten(X,Y,Z).

     Отработайте различные цели, используя программу как для
     сцепления списков, так и для разбиения списка на известные
     или неизвестные части. Например, отработайте цели:
     a) ?- concaten([a,b],[c,d],Z),
     b) ?- concaten([a,b,c],["1","2","3"],Z),
     c) ?- concaten(X,Y,[a,b,c]),
     d) ?- concaten([a],Y,[a,b,c]),
     e) ?- concaten(X,[b,c],[a,b,c]),
     f) ?- concaten([a],[b,c],[a,b,c]),
     g) ?- concaten([a],[b,c],[a,b,c,d]).

4.4. Примените программу из 4.3 для поиска в списке комбинации
     элементов, отвечающей некоторому условию, заданному в виде
     шаблона или образца. Например, выполните цели:
     a) ?- concaten(Before,[may|After],
          [jan,feb,mar,apr,may,jun,jul,aug,sep,okt,nov,dec]),
     b) ?- concaten(_,[Month1,may,Month2|_],
            [jan,feb,mar,apr,may,jun,jul,aug,sep,okt,nov,dec]).

4.5. Универсальность программы из 4.3 потверждает также возмож-
     ность решения новых задач. Например, выясните, что проис-
     ходит при доcтижении цели
     _L1=[a,b,z,z,c,z,z,z,d,e],concaten(L2,[z,z,z|_],L1)
     Придумайте другие цели , демонстрирующие гибкость исследу-
     емой программы.

4.6. В среде Турбо-пролога отработайте программу exmpl404.pro,
     реализующую сцепление двух списков с использованием
     конкатенации.

     DOMAINS
       slist = symbol*
     PREDICATES
       concaten(slist,slist,slist)
       member(symbol,slist)
     CLAUSES
       concaten([],Y,Y).
       concaten([Xh|X],Y,[Xh|Z]):-
       concaten(X,Y,Z).
       member(X,L):-
         concaten(_,[X|_],L).

     Сравните декларативные и процедурные смыслы программ
     exmpl403.pro и examp404.pro, получите их трассировки для
     цели ?- member(b,[a,b,c]).

4.7. В среде Турбо-пролога отработайте программы exmpl405.pro
     и exmpl406.pro, определяющие последний элемент списка.

     /*  exmpl405.pro  */

     DOMAINS
       slist = symbol*
     PREDICATES
       last(slist,symbol)
     CLAUSES
       last([X|[]],X).
       last([_|Z],X):-
         last(Z,X).

     /*  exmpl406.pro  */

     DOMAINS
       slist = symbol*
     PREDICATES
       concaten(slist,slist,slist)
       last(slist,symbol)
     CLAUSES
       last(L,X):-
         concaten(_,[X],L).
       concaten([],Y,Y).
       concaten([Xh|X],Y,[Xh|Z]):-
         concaten(X,Y,Z).

================================================================
